server {
    listen 80;
    listen [::]:80;
    server_name _;  # Replace with your domain if available

    # Redirect HTTP to HTTPS
    # Uncomment the following block when SSL is configured
    # location / {
    #     return 301 https://$host$request_uri;
    # }

    # For now, serve HTTP directly
    location / {
        proxy_pass http://app:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# HTTPS server configuration
# Uncomment when SSL certificates are available
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name _;  # Replace with your domain
#
#     ssl_certificate /etc/nginx/ssl/fullchain.pem;
#     ssl_certificate_key /etc/nginx/ssl/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 1d;
#     ssl_session_tickets off;
#
#     # HSTS (uncomment if using SSL and after testing)
#     # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
#
#     location / {
#         proxy_pass http://app:5000;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_cache_bypass $http_upgrade;
#     }
# }